name: Image Scan Test
run-name: Image Scan Test
on: 
  - push
  # pull_request:
  #   types: 
  #     - opened
  #     - edited
    # paths:
    #   - 'pull-images.csv'

permissions: write-all
  # id-token: write # This is required for requesting the JWT
  # contents: write  # This is required for actions/checkout

# pull_images.csvを読み込んでスキャンイメージをmatrixにセット
jobs:
  set_matrix:
    runs-on: ubuntu-20.04
    outputs:
      images: ${{ steps.get_scan_images.outputs.images }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: get scan images from csvfile
        id: get_scan_images
        run: |
          images=$(awk -F ',' 'OFS=":" {print $1,$2}' pull-images.csv | tail -n +2 | jq -R -s -c 'split("\n")[:-1]')
          echo "::set-output name=images::${images}"

  Image_Scan:
    needs: set_matrix
    name: Image Scan
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        scan_imagas: ${{ fromJson(needs.set_matrix.outputs.images) }}
    steps:
      - name: Set a variable
        id: var
        run: |
          artifact_name=$(echo ${{matrix.scan_imagas}} | cut -d "/" -f 2)
          echo "::set-output name=artifact_name::${artifact_name}"

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-1
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACOUNT_ID}}:role/minoru-saito-github-oidc-role

      - name: Run Trivy vulnerability scanner output table
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{matrix.scan_imagas}}
          format: 'table'
          output: '${{steps.var.outputs.artifact_name}}.txt'
          severity: 'CRITICAL'
      
      - name: Run Trivy vulnerability scanner output json
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{matrix.scan_imagas}}
          format: 'json'
          output: '${{steps.var.outputs.artifact_name}}.json'
          severity: 'CRITICAL'
      
      - name: Run Dockle output json
        uses: erzz/dockle-action@v1
        with:
          image: ${{matrix.scan_imagas}}
          failure-threshold: fatal
          report-name: '${{steps.var.outputs.artifact_name}}.json'

      - name: Upload Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name:  Upload Report
          path: "${{steps.var.outputs.artifact_name}}*"

      # - name: Post Comments
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     echo ${{ github.event.pull_request.html_url }}
      #     gh pr comment -F ./outputs ${{ github.event.pull_request.html_url }}
          
